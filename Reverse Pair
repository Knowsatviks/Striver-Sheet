class Solution {
public:
    void merge(vector<int>&nums, int mid, int s, int e){
        int index1=s;
        int index2=mid+1;
        int k=0;
        vector<int>temp;
        while(index1<=mid && index2<=e){
            if(nums[index1]<=nums[index2]){
               temp.push_back(nums[index1]);
               index1++;
            }
            else{
               temp.push_back(nums[index2]);
               index2++;
            }
        }
        while(index1<=mid){
           temp.push_back(nums[index1]);
           index1++;
        }
        while(index2<=e){
           temp.push_back(nums[index2]);
           index2++;
        }

        for(int i=s;i<=e;i++){
            nums[i]=temp[i-s];
        }
    }

    int countPairs(vector<int>&nums, int s, int mid, int e){
        int count=0;
        int j=mid+1;
        for(int i=s;i<=mid;i++){
           while(j<=e && nums[i]>2*(long long)nums[j])
           j++;

           count+=(j-(mid+1));
        }
        return count;
    }
    int mergesort(vector<int>&nums, int s, int e){
        int count=0;
        int mid=s+(e-s)/2;
        if(s>=e)
        return count;

        count+=mergesort(nums, s, mid);
        count+=mergesort(nums, mid+1, e);
        count+=countPairs(nums, s, mid, e);
        merge(nums, mid, s, e);
        return count;
    }
    int reversePairs(vector<int>& nums) {
       int count=0;
       int n= nums.size();
       count+=mergesort(nums, 0,n-1);
       return count; 
    }
};
