/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node *temp=head;

        //step 1 (Copied node after each original node)

        while(temp!=NULL){
            Node *newnode=new Node(temp->val);
            newnode->next=temp->next;
            temp->next=newnode;

            temp=temp->next->next;//move temp to next original node
        }

        //step2 (we connect all the random pointers)

        Node*iter=head;

        while(iter!=NULL){
            if(iter->random!=NULL)
            iter->next->random=iter->random->next;
            iter=iter->next->next;
        }

        //step3 (we connect all the nexts)

        Node*dummy=new Node(0);
        Node *prev=dummy;
        iter=head;
        Node *fast;

        while(iter!=NULL){
            fast=iter->next->next; //two step ahead of iter
            prev->next=iter->next; //removing the link between original and copy node
            iter->next=fast; //restoring the original linked list links
            prev=prev->next;
            iter=fast;
        }
        return dummy->next;
    }
};
